install.packages("neverhpfilter")
seriesName <- "RGDPNAIDA666NRUG"
# install.packages(c("mFilter", "quantmod"))
library(mFilter)
library(quantmod)
library(dplyr)
library(ggplot2)
library(dygraphs)
library(xts)
library(neverhpfilter)
# Change the presentation of decimal numbers to 4 and avoid scientific notation
options(prompt="R> ", digits=3, scipen=999)
seriesName <- getSymbols(seriesName, src="FRED", auto.assign = FALSE)
periodicity(seriesName)
seriesName <- log(seriesName)
dygraph(seriesName) %>%
dyRangeSelector()
seriesName_filtered_HP <- hpfilter(seriesName,
freq = 6.25
)
actual_and_trend <- cbind(seriesName, seriesName_filtered_HP[["trend"]])
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(seriesName - seriesName_filtered_HP[["trend"]])  %>%
dyRangeSelector()
seriesName_filtered_Hamilton <- yth_filter(seriesName,
h = 2,
p = 2,
output = c("x", "trend", "cycle"))
dygraph(seriesName_filtered_Hamilton[,1:2])  %>%
dyRangeSelector()
dygraph(seriesName_filtered_Hamilton[,3])  %>%
dyRangeSelector()
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(actual_and_trend) %>%
dyRangeSelector()
install.packages("dygraphs")
seriesName <- "RGDPNAIDA666NRUG"
# install.packages(c("mFilter", "quantmod"))
library(mFilter)
library(quantmod)
library(dplyr)
library(ggplot2)
library(dygraphs)
library(xts)
library(neverhpfilter)
# Change the presentation of decimal numbers to 4 and avoid scientific notation
options(prompt="R> ", digits=3, scipen=999)
seriesName <- getSymbols(seriesName, src="FRED", auto.assign = FALSE)
periodicity(seriesName)
seriesName <- log(seriesName)
dygraph(seriesName) %>%
dyRangeSelector()
seriesName_filtered_HP <- hpfilter(seriesName,
freq = 6.25
)
actual_and_trend <- cbind(seriesName, seriesName_filtered_HP[["trend"]])
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(seriesName - seriesName_filtered_HP[["trend"]])  %>%
dyRangeSelector()
seriesName_filtered_Hamilton <- yth_filter(seriesName,
h = 2,
p = 2,
output = c("x", "trend", "cycle"))
dygraph(seriesName_filtered_Hamilton[,1:2])  %>%
dyRangeSelector()
dygraph(seriesName_filtered_Hamilton[,3])  %>%
dyRangeSelector()
dygraph(actual_and_trend)
dygraph(actual_and_trend) %>%
dyRangeSelector()
seriesName <- "RGDPNAIDA666NRUG"
# install.packages(c("mFilter", "quantmod"))
library(mFilter)
library(quantmod)
library(dplyr)
library(ggplot2)
library(dygraphs)
library(xts)
library(neverhpfilter)
# Change the presentation of decimal numbers to 4 and avoid scientific notation
options(prompt="R> ", digits=3, scipen=999)
seriesName <- getSymbols(seriesName, src="FRED", auto.assign = FALSE)
periodicity(seriesName)
seriesName <- log(seriesName)
dygraph(seriesName) %>%
dyRangeSelector()
seriesName_filtered_HP <- hpfilter(seriesName,
freq = 6.25
)
actual_and_trend <- cbind(seriesName, seriesName_filtered_HP[["trend"]])
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(seriesName - seriesName_filtered_HP[["trend"]])  %>%
dyRangeSelector()
seriesName_filtered_Hamilton <- yth_filter(seriesName,
h = 2,
p = 2,
output = c("x", "trend", "cycle"))
dygraph(seriesName_filtered_Hamilton[,1:2])  %>%
dyRangeSelector()
dygraph(seriesName_filtered_Hamilton[,3])  %>%
dyRangeSelector()
seriesName <- "RGDPNABOA666NRUG"
# install.packages(c("mFilter", "quantmod"))
library(mFilter)
library(quantmod)
library(dplyr)
library(ggplot2)
library(dygraphs)
library(xts)
library(neverhpfilter)
# Change the presentation of decimal numbers to 4 and avoid scientific notation
options(prompt="R> ", digits=3, scipen=999)
seriesName <- getSymbols(seriesName, src="FRED", auto.assign = FALSE)
periodicity(seriesName)
seriesName <- log(seriesName)
dygraph(seriesName) %>%
dyRangeSelector()
seriesName_filtered_HP <- hpfilter(seriesName,
freq = 6.25
)
actual_and_trend <- cbind(seriesName, seriesName_filtered_HP[["trend"]])
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(seriesName - seriesName_filtered_HP[["trend"]])  %>%
dyRangeSelector()
seriesName_filtered_Hamilton <- yth_filter(seriesName,
h = 2,
p = 2,
output = c("x", "trend", "cycle"))
dygraph(seriesName_filtered_Hamilton[,1:2])  %>%
dyRangeSelector()
dygraph(seriesName_filtered_Hamilton[,3])  %>%
dyRangeSelector()
View(actual_and_trend)
install.packages("mFilter")
install.packages("quantmod")
install.packages("xts")
seriesName <- "RGDPNAIDA666NRUG"
# install.packages(c("mFilter", "quantmod"))
library(mFilter)
library(quantmod)
library(dplyr)
library(ggplot2)
library(dygraphs)
library(xts)
library(neverhpfilter)
# Change the presentation of decimal numbers to 4 and avoid scientific notation
options(prompt="R> ", digits=3, scipen=999)
seriesName <- getSymbols(seriesName, src="FRED", auto.assign = FALSE)
periodicity(seriesName)
seriesName <- log(seriesName)
dygraph(seriesName) %>%
dyRangeSelector()
seriesName_filtered_HP <- hpfilter(seriesName,
freq = 6.25
)
actual_and_trend <- cbind(seriesName, seriesName_filtered_HP[["trend"]])
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(seriesName - seriesName_filtered_HP[["trend"]])  %>%
dyRangeSelector()
seriesName_filtered_Hamilton <- yth_filter(seriesName,
h = 2,
p = 2,
output = c("x", "trend", "cycle"))
dygraph(seriesName_filtered_Hamilton[,1:2])  %>%
dyRangeSelector()
dygraph(seriesName_filtered_Hamilton[,3])  %>%
dyRangeSelector()
View(actual_and_trend)
View(actual_and_trend)
dygraph(actual_and_trend) %>%
dySeries(actual_and_trend[,1], label = "Male")
dygraph(actual_and_trend) %>%
dySeries(actual_and_trend[,2], label = "Male")
dygraph(actual_and_trend) %>%
dySeries(actual_and_trend[,2], label = "Male")
dygraph(actual_and_trend) %>%
dySeries(actual_and_trend[,2])
View(actual_and_trend)
View(actual_and_trend)
dygraph(actual_and_trend[,2])
dygraph(actual_and_trend[,1])
View(actual_and_trend)
View(seriesName_filtered_HP)
dygraph(seriesName_filtered_HP[["trend"]])
dyGroup(actual_and_trend)
dygraph(seriesName_filtered_HP[["trend"]], seriesName)
View(seriesName_filtered_HP)
actual_and_trend <- cbind(seriesName_filtered_HP[["x"]], seriesName_filtered_HP[["trend"]])
dygraph(actual_and_trend)
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(actual_and_trend) %>%
dySeries("x", label = "Actual GDP") %>%
dySeries("trend", label = "Potential") %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 20)
View(actual_and_trend)
dygraph(actual_and_trend) %>%
dySeries(actual_and_trend[,1] , label = "Actual GDP") %>%
dySeries(actual_and_trend[,2], label = "Potential") %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 20)
dygraph(actual_and_trend) %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 20)
actual_and_trend <- cbind(seriesName_filtered_HP[["x"]], seriesName_filtered_HP[["trend"]])
actual_and_trend <- cbind(seriesName_filtered_HP[["x"]], seriesName_filtered_HP[["trend"]])
dygraph(actual_and_trend) %>%
dyRangeSelector(height = 20)
dygraph(actual_and_trend) %>%
dyRangeSelector()
dygraph(seriesName_filtered_HP[["x"]]- seriesName_filtered_HP[["trend"]])  %>%
dyRangeSelector()
dygraph(actual_and_trend[,1:2]) %>%
dyRangeSelector()
dygraph(actual_and_trend[,1:2]) %>%
dyRangeSelector()
dygraph(actual_and_trend[,1:2]) %>%
dyRangeSelector()
dygraph(actual_and_trend[,1:2]) %>%
dyRangeSelector() %>%
dyOptions(colors = RColorBrewer::brewer.pal(3, "Set2"))
View(actual_and_trend)
actual <- seriesName_filtered_HP[["x"]]
actual_and_trend <- cbind(seriesName_filtered_HP[["x"]], seriesName_filtered_HP[["trend"]])
View(actual)
actual_and_trend <- cbind(seriesName_filtered_HP[["x"]], seriesName_filtered_HP[["trend"]])
View(actual_and_trend)
View(actual)
actual <- seriesName_filtered_HP[["x"]]
trendHP <- seriesName_filtered_HP[["trend"]]
actual_and_trend <- cbind(seriesName_filtered_HP[["x"]], seriesName_filtered_HP[["trend"]])
View(actual)
actual <- seriesName_filtered_HP[["x"]]
colnames(actual)  <- c("actual")
trendHP <- seriesName_filtered_HP[["trend"]]
actual_and_trend <- cbind(seriesName_filtered_HP[["x"]], seriesName_filtered_HP[["trend"]])
View(actual)
actual <- seriesName_filtered_HP[["x"]]
colnames(actual)  <- c("actual")
trendHP <- seriesName_filtered_HP[["trend"]]
colnames(trendHP)  <- c("trendHP")
actual_and_trend <- cbind(actual, trendHP)
dygraph(actual_and_trend[,1:2]) %>%
dyRangeSelector() %>%
View(actual_and_trend)
dygraph(actual_and_trend[,1:2]) %>%
dyRangeSelector()
